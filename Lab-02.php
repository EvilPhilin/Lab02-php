<?php
// 1. Доступ по ссылке
/*
    ● Вы унаследовали код от другого разработчика. Вы не можете изменить
    их код, но вам необходимо добавить некоторые дополнительные
    функции. Вместо использования переменной $very_bad_unclear_name,
    как в вашей части кода. Объявите новую переменную $order как ссылку
    на переменную $very_bad_unclear_name.
    ● С помощью оператора конкатенации добавьте к переменной $order
    любую строку.
    ● Распечатайте $very_bad_unclear_name
*/

echo "1 Task's output\n";

$very_bad_unclear_name = "15 chicken wings";

$order = & $very_bad_unclear_name;
$order .= "(I'm changed)";

echo "\nYour order is: $very_bad_unclear_name.";

// 2. Числа
/*
    ● Объявите переменную с любым именем и присвойте ей целочисленное
    значение. Используйте echo, чтобы вывести вашу переменную на
    терминал.
    ● Мы собираемся создать и напечатать еще одну числовую переменную,
    но мы не хотим, чтобы она печаталась в той же строке. Используйте
    echo, чтобы напечатать строку "\n".
    ● Затем объявите переменную с любым именем и присвойте ей значение
    с плавающей запятой. Используйте echo, чтобы вывести эту новую
    переменную на терминал.
    ● Используйте echo, чтобы напечатать число 12 на терминале. Хитрость:
    используйте сложение или вычитание, чтобы напечатать оператор,
    который оценивается как 12, и число 12 не может появиться нигде в
    вашем коде!
    ● Насколько больше я потратил в прошлом месяце, чем в этом месяце? В
    прошлом месяце я потратил 1187,23, а в этом месяце я потратил
    1089,98. Создайте переменные $last_month и $this_month и присвойте
    им соответствующие числовые значения. Используйте echo для вывода
    разницы между расходами в прошлом месяце и в этом месяце.
*/

echo "\n\n2 Task's output\n";

$integer = 10;
echo "{$integer}\n";
$e = 2.718281828;
echo "{$e}\n";

// Не совсем понял эту часть задания, поэтому выведу 12 два раза
echo 12, " " , 9 + 3, "\n";

$last_month = 1187.23;
$this_month = 1089.98;
echo $last_month - $this_month, "\n";

// 11. Умножение и деление
/*
    ● Мэг пытается выяснить, сколько времени в среднем ей требуется,
    чтобы выучить язык программирования. На данный момент она знает
    Ruby, Python, JavaScript и C++. Создайте переменную $num_languages и
    присвойте ей количество языков программирования, которые она
    выучила. Создайте вторую переменную, $months, и присвойте ей 11 —
    количество месяцев, которые она потратила на обучение кодированию.
    ● Мэг понимает, что не каждый день занимается. Создайте переменную
    $days и присвойте ей значение, полученное путем умножения $months
    на количество дней в месяце, которое, по ее мнению, она
    действительно провела за учебой, то есть 16 дней в месяц.
    ● Давайте подсчитаем, сколько дней в среднем у нее ушло на изучение
    каждого языка. Присвойте результат этой операции переменной
    $days_per_language.
    ● Распечатайте свою переменную $days_per_language в терминал.
*/

echo "\n11 Task's output\n";

$num_languages = 4;
$months = 11;
$days = 16;

$days_per_language = ($months * $days) / $num_languages;
echo $days_per_language, "\n";

//12. Степень
/*
    Используйте eсho и оператор **, чтобы вывести на терминал значение 8 в квадрате.
*/

echo "\n12 Task's output\n";
echo 8**2, "\n";

// 13. Операторы присвоения
/*
    ● Создайте переменную $my_num и назначьте ей любое число.
    ● Затем создайте вторую переменную, $answer, и присвойте ей значение
    $my_num
    ● Используйте оператор присваивания сложения, чтобы добавить 2 к
    $answer
    ● Используйте оператор присваивания умножения, чтобы умножить
    $answer на 2.
    ● Используйте оператор присваивания вычитания, чтобы вычесть 2 из
    $answer.
    ● Используйте оператор присваивания деления, чтобы разделить $answer
    на 2
    ● Используйте оператор присваивания вычитания, чтобы вычесть
    исходное число ($my_num) из $answer. Наконец, используйте echo для
    вывода $answer на терминал.
    ● Если все прошло как надо, $answer должен быть равен 1. Каким бы ни
    был ваш первоначальный номер
*/

echo "\n13 Task's output\n";

$my_num = 69;
$answer = 69;
$answer += 2;
$answer *= 2;
$answer -= 2;
$answer /= 2;
$answer -= $my_num;
echo $answer, "\n";

// 14. Математические функции. Работа с %
/*
    ● Даны переменные $a=10 и $b=3. Найдите остаток от деления $a на $b.
    Показать решение.
    ● Даны переменные $a и $b. Проверьте, что $a делится без остатка на $b.
    Если это так - выведите 'Делится' и результат деления, иначе выведите
    'Делится с остатком' и остаток от деления.
    Работа со степенью и корнем Для решения задач данного блока вам
    понадобятся следующие функции: sqrt, pow.
    ● Возведите 2 в 10 степень. Результат запишите в переменную $st.
    ● Найдите квадратный корень из 245.
    ● Дан массив с элементами 4, 2, 5, 19, 13, 0, 10. Найдите корень из
    суммы квадратов его элементов. Для решения воспользуйтесь
    циклом foreach.
    Работа с функциями округления (Для решения задач данного блока вам
    понадобятся следующие функции: round, ceil, floor.)
    ● Найдите квадратный корень из 379. Результат округлите до целых, до
    десятых, до сотых.
    ● Найдите квадратный корень из 587. Округлите результат в большую и
    меньшую сторону, запишите результаты округления в ассоциативный
    массив с ключами 'floor' и 'ceil'.
    Работа с min и max (для решения задач данного блока вам понадобятся
    следующие функции: min, max)
    ● Даны числа 4, -2, 5, 19, -130, 0, 10. Найдите минимальное и
    максимальное число.
    Работа с рандомом
    ● Выведите на экран случайное число от 1 до 100.
    ● Заполните массив 10-ю случайными числами. Подсказка: нужно
    воспользоваться циклами for или while.
    Работа с модулем
    ● Даны переменные $a и $b. Найдите найдите модуль разности $a и $b.
    Проверьте работу скрипта для различных $a и $b.
    ● Дан массив в числами, к примеру [1, 2, -1, -2, 3, -3]. Создайте из него
    новый массив так, чтобы отрицательные числа стали положительными,
    то есть у нас должен получиться такой массив: [1, 2, 1, 2, 3, 3].
    Общее
    ● Дано число, например 30. У этого числа есть делители - числа, на которое оно
    делится без остатка. Делители числа 30 - это 1, 2, 3, 5, 6, 10, 15, 30. Задача:
    сделайте массив делителей нашего числа. Число может быть любым, не
    обязательно, 30.
    ● Дан массив [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]. Узнайте, сколько первых элементов
    массива нужно сложить, чтобы сумма получилась больше 10
*/

echo "\n14 Task's output\n";

$a = 10;
$b = 3;
echo $a % $b, "\n";

$a = rand(0, 150);
$b = rand(1, 150);
if (($a % $b) == 0) echo "Divisible\n";
else echo "Divisible with remainder\n";

$st = 2**10;
echo $st, "\n";

echo sqrt(245), "\n";

$arr = [4, 2, 5, 19, 13, 0, 10];
$sum = 0;
foreach ($arr as $i)
    $sum += $i**2;
echo sqrt($sum), "\n";

echo round(sqrt(379), 0), " ", round(sqrt(379), 1), " ", round(sqrt(379), 2), "\n";

$rounding = ["floor" => floor(sqrt(587)), "ceil" => ceil(sqrt(587))];
echo $rounding["floor"], " ", $rounding["ceil"], "\n";

$minmax = [4, -2, 5, 19, -130, 0, 10];
echo min($minmax), " ", max($minmax), "\n";

echo rand(1, 100), "\n";
$randarr = [];
for($i = 0; $i < 10; $i++)
{
    $randEl = rand();
    echo $randEl, "\n";
    array_push($randarr, $randEl);
}
echo "\n";

$a = rand();
$b = rand();
echo abs($a - $b), "\n";

$absarr = [1, 2, -1, -2, 3, -3];
for($i = 0; $i < count($absarr); $i++)
{
    $absarr[$i] = abs($absarr[$i]);
    echo $absarr[$i], " ";
}
echo "\n";

$num = rand(1, 1000);
$divisors = [];
for($i = 1; $i <= $num; $i++)
{
    if($num % $i == 0)
    {
        array_push($divisors, $i);
        echo $i, " ";
    }
}
echo "\n";

$sumarr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
$sumel = 0;
for($i = 0; $i < count($sumarr); $i++)
{
    $sumel += $sumarr[$i];
    if($sumel == 10)
    {
        echo $i + 1, "\n";
        break;
    }
}

// 15. Функции
/*
    ● Напишите функцию printStringReturnNumber(), которая печатает строку и
    возвращает числовое значение.
    ● Запишите возвращаемое значение вашей функции в переменную с
    именем $my_num.
    ● Распечатайте $my_num.
*/

echo "\n15 Task's output\n";

function randomize()
{
    echo "Randomized value\n";
    return rand();
}
echo randomize(), "\n";

// 16. Функции
/*
    ● Напишите функцию increaseEnthusiasm(), которая принимает
    строковый параметр и возвращает эту строку, дополненную
    восклицательным знаком.
    ● Используйте echo, чтобы напечатать результат вызова вашей функции
    increaseEnthusiasm() со строкой по вашему выбору.
    ● Напишите функцию repeatThreeTimes(), которая принимает строковый
    параметр и возвращает эту строку, повторенную три раза (без
    добавления символов, которых не было в исходной строке)
    ● Используйте echo, чтобы напечатать результат вызова вашей функции
    repeatThreeTimes() со строкой по вашему выбору.
    ● Используйте echo, чтобы напечатать результат вызова функции
    increaseEnthusiasm() с результатом вызова repeatThreeTimes() в
    качестве аргумента, переданного в функцию increaseEnthusiasm(). Вы
    можете выбрать любую строку в качестве аргумента для
    repeatThreeTimes()
    ● Сделайте функцию cut, которая первым параметром будет принимать
    строку, а вторым параметром - сколько первых символов оставить в
    этой строке. Второй параметр должен быть необязательным и по
    умолчанию принимать значение 10.
    ● Дан массив с числами. Выведите последовательно его элементы
    используя рекурсию и не используя цикл.
    ● Дано число. Сложите его цифры. Если сумма получилась более 9-ти,
    опять сложите его цифры. И так, пока сумма не станет однозначным
    числом (9 и менее)
*/

echo "\n16 Task's output\n";

$testStr = "They will test those dreadful functions on me";
function increaseEnthusiasm($str)
{
    return $str .= "!";
}

function repeatThreeTimes($str)
{
    return str_repeat($str, 3);
}

echo increaseEnthusiasm($testStr), "\n", repeatThreeTimes($testStr), "\n";
echo increaseEnthusiasm(repeatThreeTimes($testStr)), "\n";

function cut($str, $min = 10)
{
    return substr($str, 0, $min);
}

echo cut($testStr), "\n";

function iterate($arr, $i, $len)
{
    if($i == $len) return;
    echo $arr[$i], " ";
    iterate($arr, ++$i, $len);
}

$reccarr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
iterate($reccarr, 0, count($reccarr));
echo "\n";

function makeItSingleDigit($num)
{
    if ($num < 10)
    {
        echo $num, "\n";
        return;
    }
    $sum = 0;
    while($num != 0)
    {
        $sum += $num % 10;
        $num = (int)($num / 10);
    }
    makeItSingleDigit($sum);
}
makeItSingleDigit(rand(1, 10000));

// 17. Массивы
/*●
    Заполните массив следующим образом: в первый элемент запишите 'x',
    во второй 'xx', в третий 'xxx' и так далее
    ● Сделайте функцию arrayFill, которая будет заполнять массив заданными
    значениями. Первым параметром функция принимает значение,
    которым заполнять массив, а вторым - сколько элементов должно быть
    в массиве. Пример: arrayFill('x', 5) сделает массив ['x', 'x', 'x', 'x', 'x'].
    ● Дан двухмерный массив с числами, например [[1, 2, 3], [4, 5], [6]]. Найдите
    сумму элементов этого массива. Массив, конечно же, может быть
    произвольным
    ● С помощью двух циклов создайте массив [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    ● Создайте массив с элементами 2, 5, 3, 9. Умножьте первый элемент
    массива на второй, а третий элемент на четвертый. Результаты
    сложите, присвойте переменной $result. Выведите на экран значение
    этой переменной.
    ● Создайте массив $user с ключами 'name', 'surname', 'patronymic' и
    какими-то произвольными значениями. Выведите на экран фамилию,
    имя и отчество через пробел.
    ● Создайте массив $date с ключами 'year', 'month' и 'day' и значениями,
    соответствующими текущему дню. Выведите созданную дату на экран в
    формате год-месяц-день.
    ● Пусть дан такой массив:
    <?php
    $arr = ['a', 'b', 'c', 'd', 'e'];
    ?><!--
    Выведите на экран количество элементов в этом массиве.
    ● Пусть дан такой массив:
    <?php
    /*○ $arr = ['a', 'b', 'c', 'd', 'e'];
    ?>
    Выведите на экран последний элемент этого массива.
    Выведите на экран предпоследний элемент этого массива.
*/

echo "\n17 Task's output\n";

$farr = [];
for($i = 0; $i < 5; $i++)
{
    array_push($farr, str_repeat("x", $i + 1));
    echo $farr[$i], " ";
}
echo "\n";

function arrayFill($el, $times)
{
    $arr = [];
    for($i = 0; $i < $times; $i++)
    {
        array_push($arr, $el);
        echo $arr[$i], " ";
    }
    return $arr;
}
$funcarr = arrayFill('x', 5);
echo "\n";

$sum = 0;
$ddarr = [[1, 2, 3], [4, 5], [6]];
for($i = 0; $i < count($ddarr); $i++)
    for($j = 0; $j < count($ddarr[$i]); $j++)
        $sum += $ddarr[$i][$j];
echo $sum, "\n";

$newarr = [];
$size = 3;
for($i = 0; $i < $size; $i++)
{
    for($j = 0; $j < $size; $j++)
    {
        $newarr[$i][$j] = ($j + 1) + $i * $size;
        echo $newarr[$i][$j], " ";
    }
    echo "\n";
}

$resarr = [2, 5, 3, 9];
echo ($result = $resarr[0] * $resarr[1] + $resarr[2] * $resarr[3]), "\n";

$user = ["name" => "N", "surname" => "S", "patronymic" => "P"];
echo $user["name"], " ", $user["surname"], " ", $user["patronymic"], "\n";

$date = ["year" => date("y"), "month" => date('m'), "day" => date("d")];
echo $date["year"], " ", $date["month"], " ", $date["day"], "\n";

$arr = ['a', 'b', 'c', 'd', 'e'];
echo count($arr), "\n";
echo $arr[count($arr) - 1], " ", $arr[count($arr) - 2], "\n";

// 18. Конструкция if else
/*
    ● Сделайте функцию, которая параметрами принимает 2 числа. Если их
    сумма больше 10 - пусть функция вернет true, а если нет - false.
    ● Сделайте функцию, которая параметрами принимает 2 числа. Если эти
    числа равны - пусть функция вернет true, а если не равны - false..
    ● Перепишите следующий код в сокращенной форме:
    <?php
    if ($test == 0) {
    echo 'верно';
    }
    ?><!--
    ● Пусть в переменной $age хранится число. Если это число меньше 10 или
    больше 99, то выведите на экран сообщение об этом. Если же число
    попадает в указанный диапазон, то найдите сумму цифр этого числа.
    Если полученная сумма меньше или равна 9, то выведите на экран
    сообщение о том, что сумма цифр однозначна, в противном случае
    выведите сообщение о том, что сумма цифр двузначна.
    ● В переменной $arr содержится некоторый массив с числами. Напишите
    условие, которое проверит, что в массиве 3 элемента. Если это так,
    выведите на экран сумму элементов массива.
*/

echo "\n18 Task's output\n";

function tenCompare($a, $b)
{
    if($a + $b > 10) return true;
    else return false;
}
echo tenCompare(4, 9), "\n";

function compare($a, $b)
{
    if($a == $b) return true;
    else return false;
}
echo compare(9, 9), "\n";

$test = 0;
echo $test == 0 ? "True\n" : pass;

$age = 54;
if($age >= 10 && $age <= 99)
{
    $dsum = 0;
    while($age != 0)
    {
        $dsum += $age % 10;
        $age = (int)($age / 10);
    }
    if($dsum < 10) echo "Sum is single digit\n";
    else echo "Sum is double digit\n";
}
else echo "Doesnt match\n";

$arr = [3, 5, 4];
$sum = 0;
if(count($arr) == 3)
{
    for($i = 0; $i < count($arr); $i++)
        $sum += $arr[$i];
    echo $sum, "\n";
}

// 19. Циклы
/*
    ● Нарисуйте пирамиду, как показано на рисунке, только у вашей
    пирамиды должно быть 20 рядов, а не 5:
    x
    xx
    xxx
    xxxx
    xxxxx
*/

echo "\n19 Task's output\n";

$n = 20;
for($i = 1; $i <= 20; $i++)
{
    for($j = 1; $j <= $i; $j++)
        echo "X";
    echo "\n";
}

$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
echo array_sum($arr) / count($arr), "\n";

echo array_sum(range(1, 100)), "\n";

$arr = array_map('sqrt', $arr);
foreach($arr as $i) echo $i, " ";
echo "\n";

$keys = range('a', 'z');
$els = range(1, 26);
$arr = array_combine($keys, $els);
foreach($arr as $key => $i) echo $key, "-", $i, " ";
echo "\n";

$str = '1234567890';
echo array_sum(str_split($str, 2));